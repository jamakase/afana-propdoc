version: '3.8'

services:
  traefik:
    image: traefik:v2.11
    container_name: traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.myresolver.acme.email=jamakase54@gmail.com"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /home/yc-user/data/ssl:/letsencrypt
    restart: always

  frontend_app:
    image: cr.yandex/crpc50gkvq2bp251sfgb/app:latest
    pull_policy: always
    environment:
      - API_URL=https://api-afana.${HOST}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app.rule=Host(`app.${HOST}`)"
      - "traefik.http.routers.app.entrypoints=websecure"
      - "traefik.http.routers.app.tls.certresolver=myresolver"
      - "traefik.http.services.app.loadbalancer.server.port=3000"
      - "traefik.http.routers.app-http.rule=Host(`app.${HOST}`)"
      - "traefik.http.routers.app-http.entrypoints=web"
      - "traefik.http.routers.app-http.middlewares=app-https-redirect"
      - "traefik.http.middlewares.app-https-redirect.redirectscheme.scheme=https"

  backend_app:
    pull_policy: always
    image: cr.yandex/crpc50gkvq2bp251sfgb/backend
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - APP_SECRET_KEY=${APP_SECRET_KEY}
      - ACCESS_CONTROL_ALLOW_ORIGIN=${ACCESS_CONTROL_ALLOW_ORIGIN}
      - BROKER_URL=${BROKER_URL}
      - RESULT_BACKEND=${RESULT_BACKEND}
      - DATABASE_URL=${DATABASE_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - HOST=${HOST}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
    depends_on:
      - db
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api-afana.${HOST}`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls.certresolver=myresolver"
      - "traefik.http.services.api.loadbalancer.server.port=5000"

  db:
    container_name: db
    image: postgres:15
    volumes:
      - /home/yc-user/data/postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 10s

  redis:
    container_name: redis
    image: redis:6
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    command: redis-server --requirepass ${REDIS_PASSWORD}

  celery_worker:
    image: cr.yandex/crpc50gkvq2bp251sfgb/backend
    pull_policy: always
    entrypoint: celery -A celery_worker.celery worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379/0
    depends_on:
      - db
      - redis
      - backend_app

  ml:
    container_name: ml
    image: cr.yandex/crpc50gkvq2bp251sfgb/ml
    environment:
      FAISS_INDEX_PATH: /data/faiss_index
      USE_OPENROUTER: false
    volumes:
      - /home/yc-user/model_cache:/app/model_cache
      - /home/yc-user/index_faiss:/data/faiss_index
    depends_on:
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ml.rule=Host(`ml.${HOST}`)"
      - "traefik.http.routers.ml.entrypoints=web"
      - "traefik.http.services.ml.loadbalancer.server.port=8000"

  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    ports:
      - "6333:6333"
    volumes:
      - /home/yc-user/data/qdrant:/qdrant/storage
    environment:
      QDRANT_API_KEY: ${QDRANT_API_KEY}
      QDRANT_ENABLE_DASHBOARD: "true"
volumes:
  # postgres_data:
  model_cache:
